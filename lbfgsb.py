## Copyright (c) 2004 David M. Cooke <cookedm@physics.mcmaster.ca>
## Modifications by Travis Oliphant and Enthought, Inc. for inclusion in SciPy
## Further modifications by M. Hoffman.

## Permission is hereby granted, free of charge, to any person obtaining a copy of
## this software and associated documentation files (the "Software"), to deal in
## the Software without restriction, including without limitation the rights to
## use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
## of the Software, and to permit persons to whom the Software is furnished to do
## so, subject to the following conditions:

## The above copyright notice and this permission notice shall be included in all
## copies or substantial portions of the Software.

## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.


from numpy import zeros, float64, array, int32
import scipy.optimize._lbfgsb as _lbfgsb
import scipy.optimize

def lbfgsb(func, x0,
           bounds=None, m=10, factr=1e7, pgtol=1e-5, maxfun=15000):
    """
    Minimize a function func using the L-BFGS-B algorithm.

    Arguments:

    func    -- function to minimize. Called as func(x, *args)
    x0      -- initial guess to minimum
    bounds  -- a list of (min, max) pairs for each element in x, defining
               the bounds on that parameter. Use None for one of min or max
               when there is no bound in that direction
    m       -- the maximum number of variable metric corrections
               used to define the limited memory matrix. (the limited memory BFGS
               method does not store the full hessian but uses this many terms in an
               approximation to it).
    factr   -- The iteration stops when
                   (f^k - f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= factr*epsmch
               where epsmch is the machine precision, which is automatically
               generated by the code. Typical values for factr: 1e12 for
               low accuracy; 1e7 for moderate accuracy; 10.0 for extremely
               high accuracy.
    pgtol   -- The iteration will stop when
                   max{|proj g_i | i = 1, ..., n} <= pgtol
               where pg_i is the ith component of the projected gradient.
    maxfun  -- maximum number of function evaluations.

    License of L-BFGS-B (Fortran code)
    ==================================

    The version included here (in fortran code) is 2.1 (released in 1997). It was
    written by Ciyou Zhu, Richard Byrd, and Jorge Nocedal <nocedal@ece.nwu.edu>. It
    carries the following condition for use:

    This software is freely available, but we expect that all publications
    describing  work using this software , or all commercial products using it,
    quote at least one of the references given below.

    References
     * R. H. Byrd, P. Lu and J. Nocedal. A Limited Memory Algorithm for Bound
       Constrained Optimization, (1995), SIAM Journal on Scientific and
       Statistical Computing , 16, 5, pp. 1190-1208.
     * C. Zhu, R. H. Byrd and J. Nocedal. L-BFGS-B: Algorithm 778: L-BFGS-B,
       FORTRAN routines for large scale bound constrained optimization (1997),
       ACM Transactions on Mathematical Software, Vol 23, Num. 4, pp. 550 - 560.
    """
    n = len(x0)

    if bounds is None: bounds = [(None,None)] * n
    if len(bounds) != n: raise ValueError('length of x0 != length of bounds')

    nbd = zeros((n,), int32)
    low_bnd = zeros((n,), float64)
    upper_bnd = zeros((n,), float64)
    bounds_map = {(None, None): 0, (1, None): 1, (1, 1): 2, (None, 1): 3}

    for i in range(0, n):
        l,u = bounds[i]
        if l is not None:
            low_bnd[i] = l
            l = 1
        if u is not None:
            upper_bnd[i] = u
            u = 1
        nbd[i] = bounds_map[l, u]

    wa = zeros((2*m*n+4*n + 12*m**2 + 12*m,), float64)
    iwa = zeros((3*n,), int32)
    task = zeros(1, 'S60')
    csave = zeros(1,'S60')
    lsave = zeros((4,), int32)
    isave = zeros((44,), int32)
    dsave = zeros((29,), float64)

    x = array(x0, float64)
    f, g = func(x)

    ns = [0]
    xs = [x.copy()]
    fs = [f.copy()]
    gs = [g.copy()]

    task[:] = 'START'
    numevals = 0

    while 1:
        _lbfgsb.setulb(m, x, low_bnd, upper_bnd, nbd, f, g, factr,
                       pgtol, wa, iwa, task, -1, csave, lsave,
                       isave, dsave)
        task_str = task.tostring()
        if task_str.startswith('FG'):
            # minimization routine wants f and g at the current x
            numevals += 1
            f, g = func(x)

        elif task_str.startswith('NEW_X'):
            # new iteration
            ns.append(numevals)
            xs.append(x.copy())
            fs.append(f.copy())
            gs.append(g.copy())

            if numevals > maxfun:
                task[:] = 'STOP: TOTAL NO. of f AND g EVALUATIONS EXCEEDS LIMIT'
        else:
            break

    info = {'numevals': ns, 'xs': xs, 'fs': fs, 'gs': gs}
    return x, f, info

